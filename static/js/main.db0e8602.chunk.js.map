{"version":3,"sources":["Components/Calendar.js","Components/InputField.js","Components/WorkList.js","App.js","serviceWorker.js","index.js"],"names":["Calendar","state","dateArray","onSelect","e","inputPopup","document","querySelector","classList","remove","props","updateDateList","Component","InputField","handleCancel","preventDefault","add","removeLastDate","target","parentElement","reset","handleSubmit","name","value","desc","description","important","checked","createWork","className","action","htmlFor","type","id","required","onClick","this","WorkList","dateList","map","obj","random","Math","key","imp","toUpperCase","replace","String","date","React","App","push","setState","lastWork","length","pop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.db0e8602.chunk.js","sourcesContent":["import React, { Component}from \"react\";\nimport SimpleReactCalendar from \"simple-react-calendar\";\n\n\n\nclass Calendar extends Component {\n  state = { dateArray: [] }\n\n\n  render() {\n    const handleClick = (e)=> {\n\n      const inputPopup = document.querySelector('.true');\n      if(inputPopup){\n       inputPopup.classList.remove('true');\n       this.props.updateDateList(e);\n\n      }\n\n\n\n    }\n    return (\n      <SimpleReactCalendar onSelect= {handleClick} />\n\n     );\n  }\n}\n\nexport default Calendar;\n","import React, { Component } from 'react';\n\nclass InputField extends Component {\n\n\n\n\n\n  handleCancel = (e) => {\n    e.preventDefault();\n\n    document.querySelector('.hidden').classList.add('true');\n    this.props.removeLastDate();\n    e.target.parentElement.reset();\n\n\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    const name =e.target.parentElement.name.value ;\n    const desc = e.target.parentElement.description.value;\n    const important = e.target.parentElement.important.checked;\n\n    this.props.createWork(name,desc,important);\n\n\n\n    document.querySelector('.hidden').classList.add('true');\n    e.target.parentElement.reset();\n\n\n\n\n\n\n  }\n  render()\n\n  {\n\n\n    return (\n      <div className='hidden true '>\n        <h2>Add a Work!</h2>\n        <form action=\"\">\n          <label htmlFor=\"name\">Name:\n            <input name='name' type=\"text\" id='name' required/>\n          </label>\n          <label htmlFor=\"desc\"> Description:\n            <input name='description' type=\"text\" id='desc' required/>\n          </label>\n          <label htmlFor=\"important\"> Important?\n            <input name='important' type=\"checkbox\" id='important' />\n\n          </label>\n          <button onClick={this.handleSubmit} >ADD</button>\n          <button id=\"cancel\" onClick={this.handleCancel} >Cancel</button>\n\n        </form>\n      </div>\n     );\n  }\n}\n\nexport default InputField;","import React, { Fragment } from 'react';\n\nclass WorkList extends React.Component {\n  state = {  }\n\n  render() {\n    return (\n\n        <ul id='render' >\n           <li >\n                    <p id='name'>Name</p>\n                    <p id='desc'>Des</p>\n                    <p id='date'>Date</p>\n           </li>\n\n\n          {this.props.dateList.map((obj)=>{\n            if(obj.name) {\n              const random = Math.random()*1000000000000000000;\n              return(\n\n                  <li key={random} imp={obj.important?'true':'false'} >\n                    <p id='name'>{obj.name.toUpperCase()}</p>\n                    <p id='desc'>{obj.desc.replace('  ','').toUpperCase()}</p>\n                    <p id='date'>{String(obj.date).replace('2020 00:00:00 GMT+0600 (Bangladesh Standard Time)','')}</p>\n                  </li>\n\n\n\n              )\n            }\n          })}\n\n        </ul>\n    )\n\n\n\n\n\n\n\n  }\n}\n\n\nexport default WorkList;","\nimport React, { useState } from 'react';\n\nimport \"./App.css\";\nimport Calendar from \"./Components/Calendar\";\nimport InputField from './Components/InputField';\nimport WorkList from './Components/WorkList';\n\nclass App extends React.Component {\n  state = {\n    dateList : [],\n  }\n\n\n  render() {\n\n    const updateDateList = (date) => {\n      const dateList =[...this.state.dateList];\n      if(date){\n        dateList.push({date});\n        this.setState({dateList});\n      }\n    }\n    const removeLastDate = ()=> {\n      const dateList = [...this.state.dateList];\n      dateList.pop();\n      this.setState({dateList});\n\n    }\n    const createWork =(name,desc,important) => {\n        const dateList = [...this.state.dateList];\n\n        let lastWork = dateList[dateList.length-1] ;\n        lastWork = {\n          ...lastWork,\n          name,\n          desc,\n          important\n        }\n        dateList.pop();\n        dateList.push(lastWork);\n        this.setState({dateList});\n    }\n    return (\n      <div className=\"App\">\n        <Calendar updateDateList={updateDateList} />\n        <InputField createWork={createWork} removeLastDate={removeLastDate}  />\n        <WorkList dateList = {this.state.dateList} ></WorkList>\n      </div>\n    )\n  }\n}\n\n\n\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nif (module.hot) {\n  module.hot.accept(() => {\n    const NextApp = require(\"./App\").default;\n\n    ReactDOM.render(\n      <React.StrictMode>\n        <NextApp />\n      </React.StrictMode>,\n      document.getElementById(\"root\")\n    );\n  });\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}